{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AACA,2BAAiBA,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR,E,CAAmC;AACnCF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCC,KAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8CC,UAAU;AACtD,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAT,QAAIH,IAAJ,CAAS,EAAEa,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAHD,EAGGM,KAHH,CAGSC,SAAS;AAChBC,YAAQC,GAAR,CAAYF,KAAZ;AACAb,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAND;AAOD,CARD;;AAUAnB,IAAIwB,IAAJ,CAAS,aAAT,EAAwB,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EACEG,SAASH,MAAT,GAAkB,KAAlB;;AAEF,QAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPvB,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAEDtB,KAAGC,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkC,gBAAMC,YAAN,CAAmBP,QAAnB,CAAlC,EAAgEd,IAAhE,CAAqEsB,UACnE1B,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEyB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkEC,IAAlE,EADF,EAEE1B,IAFF,CAEOc,YAAY;AACjBnB,QAAIH,IAAJ,CAASsB,QAAT;AACD,GAJD,EAIGP,KAJH,CAISC,SAAS;AAChBC,YAAQC,GAAR,CAAYF,KAAZ;AACAb,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAPD;AAQD,CApBD;;AAsBA,IAAIZ,EAAJ;;AAEA,qBAAY+B,OAAZ,CAAoB,kCAApB,EAAwD3B,IAAxD,CAA6D4B,cAAc;AACzEhC,OAAKgC,UAAL;AACAvC,MAAIwC,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBpB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGH,KALH,CAKSC,SAAS;AAChBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support'\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static')); //middlewares\napp.use(bodyParser.json());\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues })\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n  \n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  \n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\nlet db;\n\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch(error => {\n  console.log('ERROR:', error);\n});"]}